import type { Metadata } from "next";

import Serachbar from "@/components/Serachbar";
import prisma from "@/utils/db";
import { Cuisine, Location, PRICE, Review } from "@prisma/client";
import Sidebar from "./components/Sidebar";
import RestauarantCard from "./components/RestaurantCard";

export const metadata: Metadata = {
  title: "Search | BookTable",
  description: "Generated by create next app",
};

export interface Restaurant {
  id: number;
  name: string;
  main_image: string;
  cuisine: Cuisine;
  location: Location;
  price: PRICE;
  slug: string;
  reviews: Review[];
}

interface pageProps {
  searchParams: {
    city?: string;
    cuisine?: string;
    price?: PRICE;
  };
}

async function searchRestaurants(
  city: string | undefined,
  cuisine: string | undefined,
  price: string | undefined
) {
  let filter = {};
  if (city)
    filter = {
      ...filter,
      location: {
        name: {
          equals: city,
        },
      },
    };
  if (cuisine)
    filter = {
      ...filter,
      cuisine: {
        name: {
          equals: cuisine,
        },
      },
    };
  if (price)
    filter = {
      ...filter,
      price: {
        equals: price,
      },
    };
  const restaurants = await prisma.restaurant.findMany({
    where: { ...filter },
    select: {
      id: true,
      name: true,
      main_image: true,
      cuisine: true,
      location: true,
      price: true,
      slug: true,
      reviews: true,
    },
  });

  if (!restaurants.length) throw Error("No Restaurant Found ðŸ™„");

  return restaurants;
}

export default async function ({ searchParams }: pageProps) {
  const restaurants = await searchRestaurants(
    searchParams.city,
    searchParams.cuisine,
    searchParams.price
  );

  // SUSPENSE WILL WORK ONLY FOR THE INITIAL PAGE LOAD

  return (
    <>
      <div className="bg-gradient-to-r to-[#5f6984] from-[#0f1f47] p-2">
        <Serachbar />
      </div>
      <div className="flex py-4 m-auto w-2/3 justify-between items-start">
        <Sidebar searchParams={searchParams} />
        <div className="w-5/6">
          {restaurants.length === 0 ? (
            <p>No restaurants found ðŸ™„</p>
          ) : (
            restaurants.map((restaurant) => (
              <RestauarantCard key={restaurant.id} restaurant={restaurant} />
            ))
          )}
        </div>
      </div>
    </>
  );
}
